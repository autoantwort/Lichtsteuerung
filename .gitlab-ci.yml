image: gcc

stages:
  - build
  - version
  - deploy

build:
  stage: build
  timeout: 3h
  script:
    - apt update -y && apt install -y ninja-build curl zip unzip tar autoconf-archive bison xcb libxcb-xkb-dev libxcb1-dev libxcb-glx0-dev libxcb-keysyms1-dev libxcb-image0-dev libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev libxcb-randr0-dev libxcb-render-util0-dev libxcb-util-dev libxcb-xinerama0-dev libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev libx11-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev  libgles2-mesa-dev libgl1-mesa-dev libglu1-mesa-dev libasound2-dev
    - export VCPKG_BINARY_SOURCES="clear;files,$CI_PROJECT_DIR/vcpkg_cache,readwrite;http,https://s3.hilton.rwth-aachen.de/binarycache/{triplet}/{name}/{version}/{sha},readwrite"
    - mkdir -p build
    - cd build
    # - ln -s /usr/bin/ninja /usr/bin/ninja-build
    - export VCPKG_FORCE_SYSTEM_BINARIES=1
    - wget https://github.com/Kitware/CMake/releases/download/v3.24.1/cmake-3.24.1-linux-x86_64.tar.gz
    - tar -xf cmake-3.24.1-linux-x86_64.tar.gz
    - export PATH=$PATH:$(pwd)/cmake-3.24.1-linux-x86_64/bin
    - cmake -G Ninja .. 
    - ninja
    - cd ..
  cache:
    key: vcpkg_cache
    when: 'always'
    paths:
      - vcpkg_cache/
  artifacts:
    when: always
    paths:
      - "build/**/*.log"
      - "build/**/*.md"
      # - build/vcpkg_installed/
windows-build:
  stage: build
  timeout: 4h
  tags: 
    - windows-shell
  variables:  
    VCPKG_BINARY_SOURCES: "clear;http,https://s3.hilton.rwth-aachen.de/binarycache/{triplet}/{name}/{version}/{sha},readwrite"
  script:
    - mkdir buildtree
    - 'subst z: buildtree'
    - cmake -B build "-DVCPKG_INSTALL_OPTIONS=--clean-after-build --x-buildtrees-root=z:/ --allow-unsupported"
    - cmake --build build

  artifacts:
    when: always
    paths:
      - "build/**/*.log"
      - "build/**/*.md"
    # - docker run my-docker-image /script/to/run/tests